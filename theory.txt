QUICK REVIEW C++

1º) Input and Output

./main < input.txt > output.txt To try multiline inputs we can store them in a text file and do this, also to check multiline output 

To make cin and cout faster:

#include <bits/stdc++.h> or include only the libraries we need #include <cstdio> #include <iostream>

main(){
std::ios::sync_with_stdio(false);
cin.tie(nullptr);

cin:
every time you do cin << you ask for an input, you can do cin >> x >> y multiple times in the same sentence, for example if input is:
3
HOLA ADIOS NUNCA
ADIOS NUNCA NUNCA
HOLA MUNDO HOLA
  cin >> numcasos;
  for (int i= 0; i<numcasos; i++) {
    cin >> L >> N >> M; // L = first word N second word M third word

If we want to read an entire word/line we have to use getline(cin, name_string_variable)
Watchout if you use cin and getline, if you use cin and after getline execute the sentence cin.ignore() before the getline to ignore the \n

cout:
cout << just output whatever, it doesnt add newlines or anything if we do more than one, it outputs one thing after the other

2º) Variables:

[const] type variableName = value;
int x = 5, y = 6, z = 50;
int x, y, z;
x = y = z = 50;
const constant = 8

3º) Data types:

bool	1 byte	Stores true or false values
char	1 byte	Stores a single character/letter/number, or ASCII values SINGLE QUOTES char a = 'A' Alternatively, if you are familiar with ASCII, you can use ASCII values to display certain characters: char a = 65 cout << a
int	2 or 4 bytes	Stores whole numbers, without decimals
float	4 bytes	Stores fractional numbers, containing one or more decimals. Sufficient for storing 6-7 decimal digits
double	8 bytes	Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits

strings: to use them #include <string> 
size() / length() → number of characters s.size()
empty() → check if string is empty
clear() → remove all characters
operator[] → no bounds check
at(index) → bounds-checked
concatenation: Using + or +=
get substring from string: substr(pos, len) string s = "abcdef"; cout << s.substr(2, 3);  // "cde"
find(substring) → returns position for first ocurrence or string::npos if not found 
push_back(char), pop_back(), insert(pos, str)
erase(pos, len)
comparison: Supports ==, !=, <, >, etc. (lexicographical):
int n = stoi("123");
double d = stod("3.14");
string x = to_string(42);

The auto keyword automatically detects the type of a variable based on the value you assign to it.
It helps you write cleaner code and avoid repeating types, especially for long or complex types.

